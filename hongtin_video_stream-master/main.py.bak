from flask import Flask, render_template, Response
import cv2
import pickle
import face_recognition
import sklearn
from detect import return_box_faces

app = Flask(__name__)
video = cv2.VideoCapture(0)
face_cascade = cv2.CascadeClassifier(
    cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')


@app.route('/')
def index():
    return render_template('index.html')


def predict(frame, model_path, distance_threshold=0.5):
    with open(model_path, 'rb') as f:
        knn_clf = pickle.load(f)
    #tìm kiếm khuôn mặt từ frame hình
    X_face_locations = return_box_faces(frame)

    # nếu k có khuôn mặt trả về mảng rỗng
    if len(X_face_locations) == 0:
        return []

    # chuyển khuôn mặt về dữ liệu mã hóa
    faces_encodings = face_recognition.face_encodings(
        frame, known_face_locations=X_face_locations)

    # sử dụng KNN để dự đoán và trả về kết quả
    closest_distances = knn_clf.kneighbors(faces_encodings, n_neighbors=1)
    are_matches = [closest_distances[0][i][0] <=
                   distance_threshold for i in range(len(X_face_locations))]

    #Dự đoán tên người và xóa những người có kết quả dưới ngưỡng
    return [(pred, loc) if rec else ("unknown", loc) for pred, loc, rec in
            zip(knn_clf.predict(faces_encodings), X_face_locations, are_matches)]


def gen(video):
    while True:
        success, image = video.read()
        if not success:
            break
        
        gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
        faces = face_cascade.detectMultiScale(
            gray, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))
        #tiến hành dự đoán
        predictions = predict(image, model_path="model.clf")
        #vẽ lên frame và show frame
        for name, (top, right, bottom, left) in predictions:
            top_right = (right, top)
            bottom_left = (left, bottom + 22)
            bottom_right = (right, bottom)
            a = left
            b = bottom - top
            top_left = (top, left)
            cv2.rectangle(image, top_right, bottom_left, (255, 0, 0), 3)
            cv2.putText(image, str(name), (left, bottom),
                        cv2.FONT_HERSHEY_SIMPLEX, 2, (255, 0, 0), 1, cv2.FILLED)
            
        ret, jpeg = cv2.imencode('.jpg', image)
        frame = jpeg.tobytes()
        yield (b'--frame\r\n'
               b'Content-Type: image/jpeg\r\n\r\n' + frame + b'\r\n\r\n')


@app.route('/video')
def video_feed():
    global video
    return Response(gen(video), mimetype='multipart/x-mixed-replace; boundary=frame')


if __name__ == "__main__":
    app.run(host='0.0.0.0', port=8080, debug=True)
